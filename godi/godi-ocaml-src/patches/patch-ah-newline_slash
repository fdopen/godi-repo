--- ../../work-ref/ocaml-4.01.0/camlp4/Camlp4_config.ml	2012-07-17 17:31:12.000000000 +0200
+++ ./camlp4/Camlp4_config.ml	2015-05-31 15:29:17.707600000 +0200
@@ -17,12 +17,33 @@
  * - Nicolas Pouillard: refactoring
  *)
 
-let ocaml_standard_library = Camlp4_import.Config.standard_library;;
+
+let slashify p =
+  match Sys.os_type with
+  | "Win32" ->
+    let len = String.length p in
+    let b = String.create len in
+    for i = 0 to len - 1 do
+      String.set b i (match p.[i] with
+      | '\\' ->  '/'
+      | x -> x )
+    done;
+    b
+  | _ -> p
+
+let ocaml_standard_library = slashify (Camlp4_import.Config.standard_library) ;;
 
 let camlp4_standard_library =
-  try Sys.getenv "CAMLP4LIB"
-  with Not_found ->
-    Filename.concat ocaml_standard_library "camlp4";;
+  slashify (
+    try
+      let d = Sys.getenv "CAMLP4LIB" in
+      if Sys.is_directory d then
+        d
+      else
+        raise Not_found
+    with _ ->
+      Filename.concat ocaml_standard_library "camlp4"
+  );;
 
 let version = Sys.ocaml_version;;
 let program_name = ref "camlp4";;
--- ../../work-ref/ocaml-4.01.0/camlp4/Camlp4Bin.ml	2013-08-30 13:39:33.000000000 +0200
+++ ./camlp4/Camlp4Bin.ml	2015-05-31 15:26:12.894400000 +0200
@@ -159,14 +159,23 @@
           (new CleanAst.clean_ast)#str_item
           AstFilters.fold_implem_filters gimd;
 
+value set_output_binary () =
+  match Sys.os_type with
+  [ "Win32" ->
+    do {
+      try set_binary_mode_out stdout True with _ -> ();
+      try set_binary_mode_out stderr True with _ -> ();
+    }
+  | _ -> () ];
+
 value just_print_the_version () =
-  do { printf "%s@." Camlp4_config.version; exit 0 };
+  do { set_output_binary (); printf "%s@." Camlp4_config.version; exit 0 };
 
 value print_version () =
-  do { eprintf "Camlp4 version %s@." Camlp4_config.version; exit 0 };
+  do { set_output_binary (); eprintf "Camlp4 version %s@." Camlp4_config.version; exit 0 };
 
 value print_stdlib () =
-  do { printf "%s@." Camlp4_config.camlp4_standard_library; exit 0 };
+  do { set_output_binary (); printf "%s@." Camlp4_config.camlp4_standard_library; exit 0 };
 
 value usage ini_sl ext_sl =
   do {
--- ../../work-ref/ocaml-4.01.0/debugger/main.ml	2013-03-09 23:38:52.000000000 +0100
+++ ./debugger/main.ml	2015-05-31 15:26:12.894400000 +0200
@@ -157,10 +157,12 @@
 let set_directory dir =
   Sys.chdir dir
 let print_version () =
+  Misc.mingw_binary_output ();
   printf "The OCaml debugger, version %s@." Sys.ocaml_version;
   exit 0;
 ;;
 let print_version_num () =
+  Misc.mingw_binary_output ();
   printf "%s@." Sys.ocaml_version;
   exit 0;
 ;;
--- ../../work-ref/ocaml-4.01.0/driver/compenv.ml	2013-07-23 16:48:47.000000000 +0200
+++ ./driver/compenv.ml	2015-05-31 15:26:12.894400000 +0200
@@ -20,6 +20,7 @@
   Misc.chop_extension_if_any oname
 
 let print_version_and_library compiler =
+  Misc.mingw_binary_output ();
   Printf.printf "The OCaml %s, version " compiler;
   print_string Config.version; print_newline();
   print_string "Standard library directory: ";
@@ -27,9 +28,11 @@
   exit 0
 
 let print_version_string () =
+  Misc.mingw_binary_output ();
   print_string Config.version; print_newline(); exit 0
 
 let print_standard_library () =
+  Misc.mingw_binary_output ();
   print_string Config.standard_library; print_newline(); exit 0
 
 let fatal err =
--- ../../work-ref/ocaml-4.01.0/driver/main.ml	2013-08-20 17:32:13.000000000 +0200
+++ ./driver/main.ml	2015-05-31 15:26:12.894400000 +0200
@@ -65,6 +65,7 @@
   readenv ppf Before_compile; process_interface_file ppf filename;;
 
 let show_config () =
+  Misc.mingw_binary_output ();
   Config.print_config stdout;
   exit 0;
 ;;
--- ../../work-ref/ocaml-4.01.0/lex/main.ml	2013-03-09 23:38:52.000000000 +0100
+++ ./lex/main.ml	2015-05-31 15:26:51.644800000 +0200
@@ -20,12 +20,21 @@
 
 let usage = "usage: ocamlex [options] sourcefile"
 
+let mingw_binary_output () =
+  match Sys.os_type with
+  | "Win32" ->
+    (try set_binary_mode_out stdout true with _ -> ());
+    (try set_binary_mode_out stderr true with _ -> ());
+  | _ -> ()
+    
 let print_version_string () =
+  mingw_binary_output ();
   print_string "The OCaml lexer generator, version ";
   print_string Sys.ocaml_version ; print_newline();
   exit 0
 
 let print_version_num () =
+  mingw_binary_output ();
   print_endline Sys.ocaml_version;
   exit 0;
 ;;
--- ../../work-ref/ocaml-4.01.0/ocamlbuild/options.ml	2013-08-24 22:46:22.000000000 +0200
+++ ./ocamlbuild/options.ml	2015-05-31 15:26:12.910000000 +0200
@@ -154,11 +154,31 @@
     build_dir := Filename.concat (Sys.getcwd ()) s
   else
     build_dir := s
+
+let slashify p =
+  match Sys.os_type with
+  | "Win32" ->
+      let len = String.length p in
+      let b = String.create len in
+      for i = 0 to len - 1 do
+        String.set b i (match p.[i] with
+          | '\\' ->  '/'
+          | x -> x )
+      done;
+      b
+  | _ -> p
+
+let sb () =
+  match Sys.os_type with
+  | "Win32" ->
+      (try set_binary_mode_out stdout true with _ -> ());
+  | _ -> ()
+
 let spec = ref (
   Arg.align
   [
-   "-version", Unit (fun () -> print_endline version; raise Exit_OK), " Display the version";
-   "-vnum", Unit (fun () -> print_endline Sys.ocaml_version; raise Exit_OK),
+   "-version", Unit (fun () -> sb (); print_endline version; raise Exit_OK), " Display the version";
+   "-vnum", Unit (fun () -> sb (); print_endline Sys.ocaml_version; raise Exit_OK),
             " Display the version number";
    "-quiet", Unit (fun () -> Log.level := 0), " Make as quiet as possible";
    "-verbose", Int (fun i -> Log.classic_display := true; Log.level := i + 2), "<level> Set the verbosity level";
@@ -223,8 +243,8 @@
    "-build-dir", String set_build_dir, "<path> Set build directory (implies no-links)";
    "-install-lib-dir", Set_string Ocamlbuild_where.libdir, "<path> Set the install library directory";
    "-install-bin-dir", Set_string Ocamlbuild_where.bindir, "<path> Set the install binary directory";
-   "-where", Unit (fun () -> print_endline !Ocamlbuild_where.libdir; raise Exit_OK), " Display the install library directory";
-   "-which", String (fun cmd -> print_endline (find_tool cmd); raise Exit_OK), "<command> Display path to the tool command";
+   "-where", Unit (fun () -> sb (); print_endline (slashify !Ocamlbuild_where.libdir); raise Exit_OK), " Display the install library directory";
+   "-which", String (fun cmd -> sb (); print_endline (slashify (find_tool cmd)); raise Exit_OK), "<command> Display path to the tool command";
    "-ocamlc", set_cmd ocamlc, "<command> Set the OCaml bytecode compiler";
    "-ocamlopt", set_cmd ocamlopt, "<command> Set the OCaml native compiler";
    "-ocamldep", set_cmd ocamldep, "<command> Set the OCaml dependency tool";
--- ../../work-ref/ocaml-4.01.0/ocamldoc/odoc_args.ml	2012-10-15 19:50:56.000000000 +0200
+++ ./ocamldoc/odoc_args.ml	2015-05-31 15:26:12.910000000 +0200
@@ -235,8 +235,11 @@
   "-dot", Arg.Unit (fun () -> set_generator
        (Odoc_gen.Dot (module Odoc_dot.Generator : Odoc_dot.Dot_generator))),
     M.generate_dot ;
-  "-customdir", Arg.Unit (fun () -> Printf.printf "%s\n" Odoc_config.custom_generators_path; exit 0),
-  M.display_custom_generators_dir ;
+  "-customdir", Arg.Unit (fun () -> 
+    Misc.mingw_binary_output (); 
+    Odoc_config.custom_generators_path |> Misc.slashify |> Printf.printf "%s\n" ; 
+    exit 0),
+    M.display_custom_generators_dir ;
   "-i", Arg.String (fun s -> ()), M.add_load_dir ;
   "-g", Arg.String (fun s -> ()), M.load_file ^
   "\n\n *** HTML options ***\n";
--- ../../work-ref/ocaml-4.01.0/tools/Makefile.shared	2013-06-05 18:34:40.000000000 +0200
+++ ./tools/Makefile.shared	2015-05-31 15:26:38.712400000 +0200
@@ -94,7 +94,7 @@
 # To help building mixed-mode libraries (OCaml + C)
 
 ocamlmklib: myocamlbuild_config.cmo ocamlmklib.cmo
-	$(CAMLC) $(LINKFLAGS) -o ocamlmklib myocamlbuild_config.cmo \
+	$(CAMLC) $(LINKFLAGS) -o ocamlmklib misc.cmo myocamlbuild_config.cmo \
 	         ocamlmklib.cmo
 
 ocamlmklib.cmo: myocamlbuild_config.cmi
--- ../../work-ref/ocaml-4.01.0/tools/ocamlmklib.mlp	2013-07-23 16:48:47.000000000 +0200
+++ ./tools/ocamlmklib.mlp	2015-05-31 15:26:12.910000000 +0200
@@ -48,11 +48,13 @@
 exception Bad_argument of string
 
 let print_version () =
+  Misc.mingw_binary_output ();
   printf "ocamlmklib, version %s\n" Sys.ocaml_version;
   exit 0;
 ;;
 
 let print_version_num () =
+  Misc.mingw_binary_output ();
   printf "%s\n" Sys.ocaml_version;
   exit 0;
 ;;
--- ../../work-ref/ocaml-4.01.0/tools/ocamlprof.ml	2013-05-16 15:34:53.000000000 +0200
+++ ./tools/ocamlprof.ml	2015-05-31 15:26:12.925600000 +0200
@@ -449,11 +449,13 @@
 let usage = "Usage: ocamlprof <options> <files>\noptions are:"
 
 let print_version () =
+  Misc.mingw_binary_output ();
   printf "ocamlprof, version %s@." Sys.ocaml_version;
   exit 0;
 ;;
 
 let print_version_num () =
+  Misc.mingw_binary_output ();
   printf "%s@." Sys.ocaml_version;
   exit 0;
 ;;
--- ../../work-ref/ocaml-4.01.0/toplevel/opttopmain.ml	2013-08-20 17:32:13.000000000 +0200
+++ ./toplevel/opttopmain.ml	2015-05-31 15:26:12.925600000 +0200
@@ -48,11 +48,13 @@
     end
 
 let print_version () =
+  Misc.mingw_binary_output ();
   Printf.printf "The OCaml toplevel, version %s\n" Sys.ocaml_version;
   exit 0;
 ;;
 
 let print_version_num () =
+  Misc.mingw_binary_output ();
   Printf.printf "%s\n" Sys.ocaml_version;
   exit 0;
 ;;
--- ../../work-ref/ocaml-4.01.0/toplevel/topmain.ml	2013-08-20 17:32:13.000000000 +0200
+++ ./toplevel/topmain.ml	2015-05-31 15:26:12.925600000 +0200
@@ -47,11 +47,13 @@
     end
 
 let print_version () =
+  Misc.mingw_binary_output ();
   Printf.printf "The OCaml toplevel, version %s\n" Sys.ocaml_version;
   exit 0;
 ;;
 
 let print_version_num () =
+  Misc.mingw_binary_output ();
   Printf.printf "%s\n" Sys.ocaml_version;
   exit 0;
 ;;
--- ../../work-ref/ocaml-4.01.0/utils/config.mlp	2013-07-23 16:48:47.000000000 +0200
+++ ./utils/config.mlp	2015-05-31 15:26:12.925600000 +0200
@@ -23,16 +23,32 @@
 (* The main OCaml version string has moved to ../VERSION *)
 let version = Sys.ocaml_version
 
-let standard_library_default = "%%LIBDIR%%"
+let system = "%%SYSTEM%%"
+
+let slashify p =
+  match system with
+  | "mingw" | "mingw64" ->
+      let len = String.length p in
+      let b = String.create len in
+      for i = 0 to len - 1 do
+        String.set b i (match p.[i] with
+          | '\\' ->  '/'
+          | x -> x )
+      done;
+      b
+  | _ -> p
+
+let standard_library_default = slashify ( "%%LIBDIR%%" )
 
 let standard_library =
+  slashify (
   try
     Sys.getenv "OCAMLLIB"
   with Not_found ->
   try
     Sys.getenv "CAMLLIB"
   with Not_found ->
-    standard_library_default
+        standard_library_default )
 
 let standard_runtime = "%%BYTERUN%%"
 let ccomp_type = "%%CCOMPTYPE%%"
@@ -74,7 +90,6 @@
 
 let architecture = "%%ARCH%%"
 let model = "%%MODEL%%"
-let system = "%%SYSTEM%%"
 
 let asm = "%%ASM%%"
 let asm_cfi_supported = %%ASM_CFI_SUPPORTED%%
--- ../../work-ref/ocaml-4.01.0/utils/misc.ml	2013-06-05 19:54:20.000000000 +0200
+++ ./utils/misc.ml	2015-05-31 15:26:12.941200000 +0200
@@ -334,3 +334,24 @@
 let cut_at s c =
   let pos = String.index s c in
   String.sub s 0 pos, String.sub s (pos+1) (String.length s - pos - 1)
+
+
+let mingw_binary_output () =
+  match Sys.os_type with
+  | "Win32" ->
+      (try set_binary_mode_out stdout true with _ -> ());
+      (try set_binary_mode_out stderr true with _ -> ());
+  | _ -> ()
+
+let slashify p =
+  match Sys.os_type with
+  | "Win32" ->
+      let len = String.length p in
+      let b = String.create len in
+      for i = 0 to len - 1 do
+        String.set b i (match p.[i] with
+          | '\\' ->  '/'
+          | x -> x )
+      done;
+      b
+  | _ -> p
--- ../../work-ref/ocaml-4.01.0/utils/misc.mli	2013-06-05 19:54:20.000000000 +0200
+++ ./utils/misc.mli	2015-05-31 15:26:12.941200000 +0200
@@ -164,3 +164,7 @@
    Raise [Not_found] if the character does not appear in the string
    @since 4.01
 *)
+
+
+val mingw_binary_output : unit -> unit
+val slashify: string -> string
--- ../../work-ref/ocaml-4.01.0/yacc/main.c	2015-05-31 15:32:15.906400000 +0200
+++ ./yacc/main.c	2015-05-31 15:26:12.941200000 +0200
@@ -166,6 +166,17 @@
     exit(1);
 }
 
+#if defined(_WIN32) || defined(__CYGWIN__)
+#include <io.h>
+#include <fcntl.h>
+static void binary_stdout(void)
+{
+    setmode(1,O_BINARY);
+}
+#else
+#define binary_stdout() do{}while(0)
+#endif
+
 void getargs(int argc, char **argv)
 {
     register int i;
@@ -190,10 +201,12 @@
 
         case 'v':
             if (!strcmp (argv[i], "-version")){
+              binary_stdout();
               printf ("The OCaml parser generator, version "
                       OCAML_VERSION "\n");
               exit (0);
             }else if (!strcmp (argv[i], "-vnum")){
+              binary_stdout();
               printf (OCAML_VERSION "\n");
               exit (0);
             }else{
