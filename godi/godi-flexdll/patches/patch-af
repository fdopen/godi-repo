--- ./reloc.ml
+++ ./reloc.ml
@@ -588,6 +588,16 @@
   let objs = collect (function (f, `Obj x) -> Some (f,x) | _ -> None) files in
   let libs = collect (function (f, `Lib (x,_)) -> Some (f,x) | _ -> None) files in
 
+  let with_data_symbol symbols sym_name f =
+    if !toolchain <> `MSVC && !toolchain <> `MSVC64 then
+      match check_prefix "__nm_" sym_name with
+      | None -> ()
+      | Some s ->
+        let imp_name = "__imp_" ^ s  in
+        if List.exists ( fun p -> Symbol.is_defin p &&
+          p.sym_name = imp_name) symbols then
+          f s;
+  in
   (* Collect all the available symbols, including those defined
      in default libraries *)
   let defined, from_imports, unalias =
@@ -634,9 +644,13 @@
 
       (* Collect defined symbols *)
       List.iter
-        (fun sym -> if Symbol.is_defin sym then add_def sym.sym_name)
+        (fun sym -> if Symbol.is_defin sym then (
+          add_def sym.sym_name;
+          with_data_symbol obj.symbols sym.sym_name add_def;
+         ))
         obj.symbols
-
+        
+        
     and collect_file fn =
       if not (Hashtbl.mem collected (String.lowercase fn)) then begin
         Hashtbl.replace collected (String.lowercase fn) ();
@@ -684,13 +698,15 @@
     let def_in_obj fn (objname, obj) =
       List.iter
         (fun sym ->
-           if Symbol.is_defin sym
-           then begin
-             if !explain then
-               Printf.printf "Symbol %s found in %s(%s)\n%!" sym.sym_name fn
-                 objname;
-             Hashtbl.replace defined_in sym.sym_name (fn, objname, obj);
-           end
+        if Symbol.is_defin sym then begin
+          let f s =
+            if !explain then
+              Printf.printf "Symbol %s found in %s(%s)\n%!" s fn objname;
+            Hashtbl.replace defined_in s (fn,objname,obj);
+          in
+          f sym.sym_name;
+          with_data_symbol obj.symbols sym.sym_name f;
+         end
         )
         obj.symbols
     in
