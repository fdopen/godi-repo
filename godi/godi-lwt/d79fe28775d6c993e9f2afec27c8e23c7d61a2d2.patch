From d79fe28775d6c993e9f2afec27c8e23c7d61a2d2 Mon Sep 17 00:00:00 2001
From: arirux <fdopen@ml.ignorelist.com>
Date: Fri, 27 Mar 2015 18:27:54 +0100
Subject: [PATCH] move check to discover.ml/lwt_config.ml

---
 discover.ml                 | 26 ++++++++++++++++++++++++++
 src/unix/lwt_unix.ml        | 21 ++++++++-------------
 src/unix/lwt_unix_unix.c    | 22 +++-------------------
 src/unix/lwt_unix_windows.c | 10 ----------
 4 files changed, 37 insertions(+), 42 deletions(-)

diff --git a/discover.ml b/discover.ml
index 7083931..68a94b9 100644
--- a/discover.ml
+++ b/discover.ml
@@ -234,6 +234,31 @@ CAMLprim value lwt_test(value Unit)
 }
 "
 
+let hostent_reentrant_code = "
+#define _GNU_SOURCE
+#include <stddef.h>
+#include <caml/mlvalues.h>
+#include <caml/config.h>
+/* Helper functions for not re-entrant functions */
+#if !defined(HAS_GETHOSTBYADDR_R) || (HAS_GETHOSTBYADDR_R != 7 && HAS_GETHOSTBYADDR_R != 8)
+#define NON_R_GETHOSTBYADDR 1
+#endif
+
+#if !defined(HAS_GETHOSTBYNAME_R) || (HAS_GETHOSTBYNAME_R != 5 && HAS_GETHOSTBYNAME_R != 6)
+#define NON_R_GETHOSTBYNAME 1
+#endif
+
+CAMLprim value lwt_test(value u)
+{
+  (void)u;
+#if defined(NON_R_GETHOSTBYNAME) || defined(NON_R_GETHOSTBYNAME)
+#error \"not available\"
+#else
+  return Val_unit;
+#endif
+}
+"
+
 (* +-----------------------------------------------------------------+
    | Compilation                                                     |
    +-----------------------------------------------------------------+ *)
@@ -584,6 +609,7 @@ Lwt can use pthread or the win32 API.
   test_feature ~do_check "fdatasync" "HAVE_FDATASYNC" (fun () -> test_code ([], []) fdatasync_code);
   test_feature ~do_check:(do_check && not !android_target)
     "netdb_reentrant" "HAVE_NETDB_REENTRANT" (fun () -> test_code ([], []) netdb_reentrant_code);
+  test_feature ~do_check "reentrant gethost*" "HAVE_REENTRANT_HOSTENT" (fun () -> test_code ([], []) hostent_reentrant_code);
 
   let get_cred_vars = [
     "HAVE_GET_CREDENTIALS_LINUX";
diff --git a/src/unix/lwt_unix.ml b/src/unix/lwt_unix.ml
index 7011cd8..f0ade80 100644
--- a/src/unix/lwt_unix.ml
+++ b/src/unix/lwt_unix.ml
@@ -1544,8 +1544,6 @@ let gethostname () =
   else
     run_job (gethostname_job ())
 
-external have_reentrant_hostent: unit -> bool = "lwt_have_reentrant_hostent" "noalloc"
-let have_reentrant_hostent = have_reentrant_hostent ()
 let hostent_mutex = Lwt_mutex.create ()
 
 external gethostbyname_job : string -> Unix.host_entry job = "lwt_unix_gethostbyname_job"
@@ -1553,7 +1551,7 @@ external gethostbyname_job : string -> Unix.host_entry job = "lwt_unix_gethostby
 let gethostbyname name =
   if Sys.win32 then
     Lwt.return (Unix.gethostbyname name)
-  else if have_reentrant_hostent then
+  else if Lwt_config._HAVE_REENTRANT_HOSTENT then
     run_job (gethostbyname_job name)
   else
     Lwt_mutex.with_lock hostent_mutex ( fun () ->
@@ -1564,17 +1562,14 @@ external gethostbyaddr_job : Unix.inet_addr -> Unix.host_entry job = "lwt_unix_g
 let gethostbyaddr addr =
   if Sys.win32 then
     Lwt.return (Unix.gethostbyaddr addr)
-  else if have_reentrant_hostent then
+  else if Lwt_config._HAVE_REENTRANT_HOSTENT then
     run_job (gethostbyaddr_job addr)
   else
     Lwt_mutex.with_lock hostent_mutex ( fun () ->
         run_job (gethostbyaddr_job addr) )
 
-external have_netdb_reentrant : unit -> bool = "lwt_have_netdb_reentrant" "noalloc"
-let have_netdb_reentrant = have_netdb_reentrant ()
-
 let protoent_mutex =
-  if Sys.win32 || have_netdb_reentrant then
+  if Sys.win32 || Lwt_config._HAVE_NETDB_REENTRANT then
     hostent_mutex
   else
     Lwt_mutex.create ()
@@ -1584,7 +1579,7 @@ external getprotobyname_job : string -> Unix.protocol_entry job = "lwt_unix_getp
 let getprotobyname name =
   if Sys.win32 then
     Lwt.return (Unix.getprotobyname name)
-  else if have_netdb_reentrant then
+  else if Lwt_config._HAVE_NETDB_REENTRANT then
     run_job (getprotobyname_job name)
   else
     Lwt_mutex.with_lock protoent_mutex ( fun () ->
@@ -1595,14 +1590,14 @@ external getprotobynumber_job : int -> Unix.protocol_entry job = "lwt_unix_getpr
 let getprotobynumber number =
   if Sys.win32 then
     Lwt.return (Unix.getprotobynumber number)
-  else if have_netdb_reentrant then
+  else if Lwt_config._HAVE_NETDB_REENTRANT then
     run_job (getprotobynumber_job number)
   else
     Lwt_mutex.with_lock protoent_mutex ( fun () ->
         run_job (getprotobynumber_job number))
 
 let servent_mutex =
-  if Sys.win32 || have_netdb_reentrant then
+  if Sys.win32 || Lwt_config._HAVE_NETDB_REENTRANT then
     hostent_mutex
   else
     Lwt_mutex.create ()
@@ -1612,7 +1607,7 @@ external getservbyname_job : string -> string -> Unix.service_entry job = "lwt_u
 let getservbyname name x =
   if Sys.win32 then
     Lwt.return (Unix.getservbyname name x)
-  else if have_netdb_reentrant then
+  else if Lwt_config._HAVE_NETDB_REENTRANT then
     run_job (getservbyname_job name x)
   else
     Lwt_mutex.with_lock protoent_mutex ( fun () ->
@@ -1623,7 +1618,7 @@ external getservbyport_job : int -> string -> Unix.service_entry job = "lwt_unix
 let getservbyport port x =
   if Sys.win32 then
     Lwt.return (Unix.getservbyport port x)
-  else if have_netdb_reentrant then
+  else if Lwt_config._HAVE_NETDB_REENTRANT then
     run_job (getservbyport_job port x)
   else
     Lwt_mutex.with_lock protoent_mutex ( fun () ->
diff --git a/src/unix/lwt_unix_unix.c b/src/unix/lwt_unix_unix.c
index a1d3658..dc2b25f 100644
--- a/src/unix/lwt_unix_unix.c
+++ b/src/unix/lwt_unix_unix.c
@@ -1665,33 +1665,17 @@ LWT_NOT_AVAILABLE1(unix_getgrgid_job)
 #endif
 
 /* Helper functions for not re-entrant functions */
+
+/* keep test in sync with discover.ml */
 #if !defined(HAS_GETHOSTBYADDR_R) || (HAS_GETHOSTBYADDR_R != 7 && HAS_GETHOSTBYADDR_R != 8)
 #define NON_R_GETHOSTBYADDR 1
 #endif
 
+/* keep test in sync with discover.ml */
 #if !defined(HAS_GETHOSTBYNAME_R) || (HAS_GETHOSTBYNAME_R != 5 && HAS_GETHOSTBYNAME_R != 6)
 #define NON_R_GETHOSTBYNAME 1
 #endif
 
-CAMLprim value lwt_have_reentrant_hostent(value u)
-{
-  (void)u;
-#if defined(NON_R_GETHOSTBYNAME) || defined(NON_R_GETHOSTBYNAME)
-  return Val_int(0);
-#else
-  return Val_int(1);
-#endif
-}
-
-CAMLprim value lwt_have_netdb_reentrant(value u){
-  (void)u;
-#ifdef HAVE_NETDB_REENTRANT
-  return Val_int(1);
-#else
-  return Val_int(0);
-#endif
-}
-
 #if defined(NON_R_GETHOSTBYADDR) || defined(NON_R_GETHOSTBYNAME)
 static char **
 c_copy_addr_array(char ** src, int addr_len)
diff --git a/src/unix/lwt_unix_windows.c b/src/unix/lwt_unix_windows.c
index 27db396..7152c3f 100644
--- a/src/unix/lwt_unix_windows.c
+++ b/src/unix/lwt_unix_windows.c
@@ -506,16 +506,6 @@ CAMLprim value lwt_unix_system_job(value cmdline)
   }
 }
 
-CAMLprim value lwt_have_reentrant_hostent(value u)
-{
-  (void) u;
-  return Val_int(0);
-}
-CAMLprim value lwt_have_netdb_reentrant(value u)
-{
-  (void) u;
-  return Val_int(0);
-}
 /* +-----------------------------------------------------------------+
    | Unavailable primitives                                          |
    +-----------------------------------------------------------------+ */
